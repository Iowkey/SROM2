using ConsoleApp1;
using NUnit.Framework;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace SromTests
{
    [TestFixture]
    public class Class1
    {
        [Test]
        [TestCase("1", "1", "2")]
        [TestCase("A208F2341973A2F517D68741B2DE1DE8921BFC4EA0A1C4DA67FE894DAF976A86", "92BE89BBFCD3760ADF1071EAB7B159EC00C8D22A812B103FE8A24A7B1C922499", "134C77BF0164718FFF6E6F92C6A8F77D492E4CE7921CCD51A50A0D3C8CC298F1F")]
        [TestCase("C77E6EA7802A07E31653C4C0AF78F3CF46C47029E854EAD5B6710BFD1ED761DD", "530443350EDB89BF4809DF6E22FE8BF41D0E4E5212762AADA74F125A20996F9A", "11A82B1DC8F0591A25E5DA42ED2777FC363D2BE7BFACB15835DC01E573F70D177")]
        [TestCase("6E90A982977373DDC113D00578416811A541A7BF255C20CCDFFE10A0ED44E852874FBC1CE89D2051F6E976AFDBE808D9", "28E5296DBFDA46B352F0B55A94A893E5BAB7C3FFF244A189676E4A3A85F0385809EE736AD27FD4E09BA605EEEB16CA2C", "9775D2F0574DBA91140485600CE9FBF75FF96BBF17A0C256476C5ADB733520AA913E2F87BB1CF532928F7C9EC6FED305")]
        [TestCase("2", "2", "4")]
        [TestCase("5C353D8D758E06E4DFFB37B5",
                 "0",
                 "5C353D8D758E06E4DFFB37B5")]
        [TestCase("5C353D8D758E06E4DFFB37B5",
                 "1",
                 "5C353D8D758E06E4DFFB37B6")]
        [TestCase("671291C18CC4CEEA9F0878A9ED848F9A471AEFAF99C597B1062E7F5BE278E27444F0B6CD3951821905547367EB45B8C9",
                 "666A82C256DEBA9CA73BE9DFA4736678E37E8B7635C1A6BCF3A67ED7378C79F942A04CA8D8E3AD4D91C1B134641F6B65",
                 "CD7D1483E3A389874644628991F7F6132A997B25CF873E6DF9D4FE331A055C6D8791037612352F669716249C4F65242E")]
        public void AdditionTest(string hex1, string hex2, string expectedResult)
        {
            var a = Program.NumToArr(hex1);
            var b = Program.NumToArr(hex2);


            var actualResult = Program.LongAddition(a, b);
            var res = Program.ShowResult(actualResult);
            NUnit.Framework.Assert.AreEqual(expectedResult, res);
        }

        [Test]
        [TestCase("5C353D8D758E06E4DFFB37B5",
                  "0",
                  "5C353D8D758E06E4DFFB37B5"
            )]
        [TestCase("5C353D8D758E06E4DFFB37B5",
                  "1",
                  "5C353D8D758E06E4DFFB37B4"
            )]
        [TestCase("6E90A982977373DDC113D00578416811A541A7BF255C20CCDFFE10A0ED44E852874FBC1CE89D2051F6E976AFDBE808D9", "28E5296DBFDA46B352F0B55A94A893E5BAB7C3FFF244A189676E4A3A85F0385809EE736AD27FD4E09BA605EEEB16CA2C", "45AB8014D7992D2A6E231AAAE398D42BEA89E3BF33177F43788FC6666754AFFA7D6148B2161D4B715B4370C0F0D13EAD")]
        [TestCase("FF92413583A4CAA23ECF4BB33025B1A58DE1217F358D0F40BE07D91AA298BB5E57B47199DA3D3EFA48487917D861CFA53CE5C0F2C46DEACAF0AC9E31C6578899", "8CFDEAF151E82924FB80AA4B861142CE6C524B34E61CC2ADED9AC5FBD650AFFAB2FBE98C1FB758D0A2C90E26DA6D7DA8623B3C49F7D4F16207A1B5D6B7875E25", "7294564431BCA17D434EA167AA146ED7218ED64A4F704C92D06D131ECC480B63A4B8880DBA85E629A57F6AF0FDF451FCDAAA84A8CC98F968E90AE85B0ED02A74")]
        public void SubtractionTest(string hex1, string hex2, string expectedResult)
        {
            var a = Program.NumToArr(hex1);
            var b = Program.NumToArr(hex2);
            var actualResult = Program.LongSub(a, b);
            var res = Program.ShowResult(actualResult);
            NUnit.Framework.Assert.AreEqual(expectedResult, res);
        }

        [Test]
        [TestCase("354FE50A9396DA3D5BDB6327FBF7DE11871BF3D0143055EC2AB3786D3A85E62EC763A05A73A7F08D21EEE3CBCAE207E40854121BFF8258F7B2B293B0D30277CD",
                 "58800406778F64750E949A6D229AC61FCD424632593C4735A664199B424E606126A31B875E3D5E9E9C2E13D6995CC801E60C30247808A6EE01E78895E16EAD95",
                 "126E1F84C05F2F0478BC1BB97EA870E2357DFF1FA3ED0F8D9E4F2C4B1CF933D3F64BD22D9761FD598EF8F381AB2A84294359B2EE43D70170CF9182EBB961D56D19970429DEF02494C95B341ACC75EFF227A0D4BDD9149483D9D7143D56B3C25D8B55B81433AD812F60A7F4234854EB569EC021432DA486C3963DED2F227B4351"
           )]
        [TestCase("B427629D0ECE5E77476643F0310B1FCF029CA9286165FD5638CDD88155E5E68A2B66FC28861FB57657E27A1D41D3E61730FAB712FB0E55728443D1A18C27DE41",
                 "5DAC441A8D178EEA44A1925C8CA96F87CAD1A377C0A32F6B1B5EF9B9C35EB4C880A08ABDA44199E807A4938658C6EC7CA27C558C226EE5E24E3CA8DA66A74E71",
                 "41EB89367562EC483164D0C6D5CADBDFA26C21CA40EEC1901C0ACAA8D2DD4B7AAA098AF873217DC3E34AE4A3D838DD3896AFD43B8C8336D47B41F082EB60FC1AAD6BA433EA3528F54ECF544CB7252EFA3CC6E1398D56723BC109BC9D23F079ABC7EB03DCCC266BDB80A08EEAC6D6B9AFBFC8E0899297CA9A9312FCECE5B7E8B1"
           )]
        [TestCase("AFB69AD91CB62A4F1A955E271B78D8DFF74A4128CF9404854AF14C11BE5B37E96DE97B2F54F668FEBED6162E30FD36D3B6F960A67E1129706EC5A0EF57DD3E45",
                 "8FCAA5A2D5E40D532389BC06A797E51A224CA67B43D9FD5D056F5E4020FF7266F3B30337952B3E694B579C82C1BFD3BC6B64FA7BA85804237852F410B5F276C4",
                 "62B21845EC85CCE30B870AE3825560BD43B7084466385E0E87D5BF6D92CA8BC8F5B7AED2293324C1AD4EC918A83FFA40051F788850BBAC2C4A9E0DE0E81A8F88B11FEA1BFFCB325B2959CFE1463F864598D6DB36F4517F8F8BD552CA2E64FF342D7B127B196A6B0019F0CE9DE0B9A691640A5B9D48609EF0EA25AE3AE6517AD4"
           )]
        [TestCase("5C353D8D758E06E4DFFB37B5",
                 "1",
                 "5C353D8D758E06E4DFFB37B5"
           )]
        [TestCase("2", "2", "4")]
        [TestCase("4", "4", "10")]
        [TestCase("1", "1", "1")]
        [TestCase("10", "4", "40")]
        [TestCase("4B", "2907058A0A9", "C050E9F71183")]
        [TestCase("A208F2341973A2F517D68741B2DE1DE8921BFC4EA0A1C4DA67FE894DAF976A86", "A208F2341973A2F517D68741B2DE1DE8921BFC4EA0A1C4DA67FE894DAF976A86", "668F52D9F89E7C315B165F4A8FF1E2935238C7678A87939F5277513F121323F28EF99B183239D24AC441CFCDED27EEB743747803A8A321EA5F71DDCE0A673E24")]
        public void MulTest(string hex1, string hex2, string expectedResult)
        {
            var a = Program.NumToArr(hex1);
            var b = Program.NumToArr(hex2);
            var actualResult = Program.LongMul(a, b);
            var res = Program.ShowResult(actualResult);
            NUnit.Framework.Assert.AreEqual(expectedResult, res);
        }

        [Test]
        [TestCase("ABABABABAABABABABABABAABABABABABABAABAB",
              "ABABABABAABABABABABABAABABABABABABAABAB",
              "1"
        )]
        [TestCase("ABABABABAABABABABABABAABABABABABABAABAB",
              "1",
              "ABABABABAABABABABABABAABABABABABABAABAB"
        )]
        [TestCase("3AC9EC8A7D3A554C1E9094A1854ACB0E2B7CBDDE59C2ADA018173C98BF4DFB1BD8D5DCCFD5BDFA9E91C8839958684D7121B4DA8863925E77EA0A27A28867B6CE",
               "A320855784D35118ABBDA9116A2D52B9CF76C5C69427AED4F3ADD63FC3B6CC36",
               "5C42488F9D580BBA73B6AB5FAEAB251C023E016259A48D44B1947A3837BA0E29"
        )]
        [TestCase("101A3F04E4BB34DD41FE0893D0FCF341776CFF41016BB753DBF23B5D6FEBF156B5CE6C511D5E54876559CF6A0BC3CDB93CE883331CE1349F604D789C440E1FBA",
               "62CFC9B03F18DEB0667A9F46DEA1D1D10AB9720ED7379F544B8C5DC67211EF89",
               "29B7DCAFF9696345732544724E3C71710551355E18CB3405AF5917CFF3B0F890"

        )]
        public void DivTest(string hex1, string hex2, string expectedResult)
        {
            var a = Program.NumToArr(hex1);
            var b = Program.NumToArr(hex2);
            var actualResult = Program.LongDiv(a, b);
            var res = Program.ShowResult(actualResult);
            NUnit.Framework.Assert.AreEqual(expectedResult, res);
        }


        [TestCase("FFFFFFFFFFFFFFFFFFFFFFFFF", "0", "1")]
        [TestCase("2", "0", "1")]
        [TestCase("2", "1", "2")]
        [TestCase("2", "3", "8")]
        [TestCase("2", "4", "10")]
        [TestCase("2", "5", "20")]
        [TestCase("2", "A", "400")]
        public void LongPowertTest(string hex1, string hex2, string expectedResult)
        {
            var a = Program.NumToArr(hex1);
            var b = Program.NumToArr(hex2);
            var actualResult = Program.LongPowerWindow(a, b);
            var res = Program.ShowResult(actualResult);
            NUnit.Framework.Assert.AreEqual(expectedResult, res);
        }
        [Test]
        [TestCase("5C353D8D758E06E4DFFB37B5", "0", 1)]
        [TestCase("F25C6961CE73B3407AD84B78DA5", "1", 1)]

        [TestCase(
           "43A84EC880F94941EDB562C98F90F0E9C2E1F9CAA58D189D72E00F25C6961CE73B3407AD84B78DA5EAFD68217852CACC9CEA9969BF6E45DF85FF71D762B6EE01",
           "43A84EC880F94941EDB562C98F90F0E9C2E1F9CAA58D189D72E00F25C6961CE73B3407AD84B78DA5EAFD68217852CACC9CEA9969BF6E45DF85FF71D762B6EE01",
           0)]

        [TestCase("354FE50A9396DA3D5BDB6327FBF7DE11871BF3D0143055EC2AB3786D3A85E62EC763A05A73A7F08D21EEE3CBCAE207E40854121BFF8258F7B2B293B0D30277CD",
           "58800406778F64750E949A6D229AC61FCD424632593C4735A664199B424E606126A31B875E3D5E9E9C2E13D6995CC801E60C30247808A6EE01E78895E16EAD95",
           -1)]

        [TestCase("B427629D0ECE5E77476643F0310B1FCF029CA9286165FD5638CDD88155E5E68A2B66FC28861FB57657E27A1D41D3E61730FAB712FB0E55728443D1A18C27DE41",
           "5DAC441A8D178EEA44A1925C8CA96F87CAD1A377C0A32F6B1B5EF9B9C35EB4C880A08ABDA44199E807A4938658C6EC7CA27C558C226EE5E24E3CA8DA66A74E71",
           1)]

        [TestCase("AFB69AD91CB62A4F1A955E271B78D8DFF74A4128CF9404854AF14C11BE5B37E96DE97B2F54F668FEBED6162E30FD36D3B6F960A67E1129706EC5A0EF57DD3E45",
           "8FCAA5A2D5E40D532389BC06A797E51A224CA67B43D9FD5D056F5E4020FF7266F3B30337952B3E694B579C82C1BFD3BC6B64FA7BA85804237852F410B5F276C4",
           1)]

        [TestCase("62D85A0F903DD94865435F59E9785DCF8593C0DB4E73D3A7FBB3EC99B6CD4C3528A93806608DD6F2F1396068E75EEF79D25FA18F36D39F44AAFB26454367B2E2",
           "2820EE434847B161C014E717E54207FFCD348088E58A83BF460679142250F9DD3ACAC62FFC55C6446F9F4782F3F144B8CA072CB149F1876A55A9D117A84F0980",
           1)]

        [TestCase("43A84EC880F94941EDB562C98F90F0E9C2E1F9CAA58D189D72E00F25C6961CE73B3407AD84B78DA5EAFD68217852CACC9CEA9969BF6E45DF85FF71D762B6EE01",
           "69EC4BE00B3EFA9C912B77B3AD086B0D238E532A2E7908A0646DE3EE3C89E2261A01403D953F8168A96B573AEC669AED43040503E25BDBA3DDF6209287D6AFC1",
           -1)]

        [TestCase("8C78744E2F49DF62D13AD204E00F731BAE0E085C353D8D758E06E4DFFB37B57A66ECC52CF2D7D888C49C2794E6FB944C4183A128203932FEBEA4B6E62B2EBDAD",
           "4112652E8135D145329F0DAE738F75C35004A154F1C43449DB87B6BE0F3EBF5B3BA1016F0A04A10C7EA76C3D30EEDB34B1E6E1009B3FF5C987FA313097485E6F",
           1)]
        public void ComparisonTest(string hex1, string hex2, int expected)
        {
            ulong carry = 0UL;
            var arr1 = Program.NumToArr(hex1);
            var arr2 = Program.NumToArr(hex2);

            var result = Program.LongCmp(arr1, arr2);



            Assert.AreEqual(expected, Program.LongCmp(arr1, arr2));
        }
        [Test]
        [TestCase("000000000001", 1)]
        [TestCase("00000000000FFFFFFFF", 32)]
        [TestCase("FFFFF00F", 32)]

        public void BitLengthTest(string hex, int expected)
        {
            var prom = Program.NumToArr(hex);
            Assert.AreEqual(expected, Program.BitLength(prom));
        }
        [Test]
        [TestCase("F", "A", "5")]
        [TestCase("1DF9E9A", "4", "2")]
        [TestCase("AAAAAAAAAA", "AAAAAAAAAA", "AAAAAAAAAA")]
        [TestCase("4D0FFA257CCEA11EBAB1F01E65A77392D01F1", "48C1B463F2782F60D0", "1")]

        public void GCDTest(string hex1, string hex2, string expectedResult)
        {
            var a = Program.NumToArr(hex1);
            var b = Program.NumToArr(hex2);
            var Result = Program.GCD(a, b);
            Assert.AreEqual(expectedResult, Program.ShowResult(Result));
        }

        [Test]
        [TestCase("3540A", "192", "EE")]
        [TestCase("2B", "7", "1")]
        [TestCase("4", "3", "1")]
        [TestCase("5", "3", "2")]
        [TestCase("AFAFAFAF", "FFFF", "5F5F")]
        [TestCase("10000000", "FFFF", "1000")]
        [TestCase("FFFFFAAAAFF32549877523487", "3F2782F60D0AD", "3D70A6B5AD60E")]
        [TestCase("8882FABDA2031571278293379", "3F2782F60D0AD", "7328466E5199")]
        [TestCase("11111FFFFF764239156912765", "3F2782F60D0AD", "388C3EF9AE13")]
        [TestCase("E3AE74A8EC74A313C8BED20D4349D9EFBA356FE6E8AD89E21C2D028111C06F422DC8E0F2E5F448830D1D61B5A7AEAC088E31AA290891E06AD83C0786443611AF",
                 "49FE1165CB7A21D12D6ACEC225285544B36BABD3F8B4DD8D94EDE1A444B9738ADF06CDB40DCAFA87B25A8BECA2D2262A53D8431A119405F0CBEFB83D2AD547CC",
                 "5B440778A063DA0407E65C6D3D0DA219FF26C6AFE8EF1395D635D94439414A190B477D6BC9358EBF60DBDEFBF38398992A8E0DAD3D5CE98746CDECEC3B63A4B")]
        [TestCase("17EFC320375C595D14B25E46B1D50B88D05E24FE722E536A32672BBD775105497475BB33FDF7965B087D34B7B22C16030619190621184AACBB415078BD9E199",
                 "3F304DFA2BBDA4896B3683D9F1F27BA74983B9A63B7926E2D2D0D6E75F863560",
                 "B81D9E67DCA2DB4F529F29234D0ECF650B61BF04B3F7A03B8B7D51F86B77FF9")]
        public void BarrettTest(string hex1, string hex2, string expectedResult)
        {
            var a = Program.NumToArr(hex1);
            var b = Program.NumToArr(hex2);
            var Result = Program.Barrett(a, b);

            Assert.AreEqual(expectedResult, Program.ShowResult(Result));
        }


        [Test]
        [TestCase("5", "18", "78")]
        [TestCase("4", "3", "C")]
        [TestCase("5", "3", "F")]
        [TestCase("FFFF", "ABAB12", "B71C28E32")]
        public void NOKTest(string hex1, string hex2, string expectedResult)
        {
            var a = Program.NumToArr(hex1);
            var b = Program.NumToArr(hex2);
            var Result = Program.NOK(a, b);

            Assert.AreEqual(expectedResult, Program.ShowResult(Result));
        }


        [Test]
        [TestCase("2E151CB", "10C2", "23413", "227E2")]
        [TestCase("AB9399181470F", "1", "9328F", "18D9C")]
        [TestCase("82", "6C", "133", "111")]
        [TestCase("AB9399181470F", "FFAF", "9328F", "460D8")]
        [TestCase("CE14CE6CE8ABB9CF69E34F839FF643C175B36E9443A58454A069D05FFE67ADD",
                  "3B9FFA83DB3AA0BC929D8AA2E72297EE3D6F93EEF3794134EF322E71431B0C88",
                  "18B44D8D06EE4E5D2254687FF927BB1D464CC8509B6E7498353B2BDE38A1AA4F",
                  "44DDF4A20BCF8F7DECA3181B34DC6FCEBCD4C5CFB2FADCED44A8199155D0B02")]
        [TestCase("240C873C5664D9929A9233CB0F8E1F19B61874A66BCB6AAA61C5A7110D6F7864",
            "E1076991258875E85E748A7DD3B4DBC8730B21149727E2F1416DDC803255CA70",
            "4E469842DC0E8EFF469429646F15074CA0A710653D88ED476036FFA23D170395",
            "DC046B9FB2B8D784F902C1E35BB1284738F1CE3234944987AED8044273C4C3C")]
        [TestCase("21682A9B54D6879DF0FB7A2ACE9DF8058BE91CFA96216026BF58C05C67E85B9AC53F7C69ACEF1029782F351452E2F133",
            "A14A4EBE9E4051D4A8DB9E684465BEF71B8114151633069271E1BA17E5836B41082FC0BE899AD35A11B113CB3C9FE4C2",
            "757CCBB1F23EEAE38036CAC7827F42FF223ED6715A388EAAB48308E94D9A79A1965C03D8C34C84DDA98086087A78147D",
            "34750E9722496E9DA5C0CD1734C3A699E1585B78E8338775026B6C1A6A85D1FDD5BEAA2F701BDBE38F92E81FFBE9421D")]
        [TestCase("C7373F42010FFDCE90F63AD45BE9B198AFA6181EB7717E9B6439A8AFFABD401580BBAEB8768A405F61D41D59606ADE77431CDC9F8CEF6343B9C606ADE998514B",
            "2457F26A63B3DA4458F040BC8D295F2E28BB7635A922902550F4CFC503734CB7DB5E06A3BC188F6551BCB9EF4B25FC92A4154B7B1BA7DE6BB1CFC1281E3C1CFC",
            "8E0CC64B031952C48CA328D6DF353CC02F9AA18AEB7338349843674E91D7BDB65CBC6209831257E4552CB90FC3EF6703678FED54E1C1897565B97EF494174078",
            "F3A031AC05778526003EA408921E2DFE2661D7F603C15313B5771474470F7186990C6C1500E99D938E5A600D0C2FFDB64E4E0D283437DC397C75BBFA9298849")]
        public void ModPower(string hex1, string hex2, string hex3, string expectedResult)
        {

            var a = Program.NumToArr(hex1);
            var b = Program.NumToArr(hex2);
            var n = Program.NumToArr(hex3);

            var Result = Program.ModPower(a, b, n);
            Assert.AreEqual(expectedResult, Program.ShowResult(Result));
        }
    }

}
